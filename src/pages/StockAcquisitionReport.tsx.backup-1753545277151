import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Download, Package, Calendar, User, Building } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { supabase } from '@/integrations/supabase/client';

interface VisitDetail {
  id: string;
  visit_number: number;
  tender_qty: number;
  received_qty: number;
  pending_qty: number;
  received_by?: string;
  received_date?: string;
  delivery_notes?: string;
  delivery_status: 'pending' | 'partial' | 'completed' | 'cancelled';
  created_at: string;
}

interface AcquisitionItem {
  item_master_id: string;
  item_name: string;
  category: string;
  subcategory: string;
  unit_of_measurement: string;
  total_tender_qty: number;
  total_received_qty: number;
  total_pending_qty: number;
  overall_status: string;
  visit_details: VisitDetail[];
}

interface Tender {
  id: string;
  tender_title: string;
  tender_number: string;
  tender_date: string;
  vendor_id?: string;
  office_ids?: string[];
  description?: string;
  vendorInfo?: any;
  officeInfo?: string;
  items: AcquisitionItem[];
}

function formatDateDMY(dateStr?: string) {
  if (!dateStr) return '-';
  const d = new Date(dateStr);
  if (isNaN(d.getTime())) return dateStr;
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
}

const StockAcquisitionReport: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [tender, setTender] = useState<Tender | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      fetchData();
    }
  }, [id]);

  const fetchData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      // Fetch basic tender information
      const { data: tenderData, error: tenderError } = await supabase
        .from('tenders')
        .select('*')
        .eq('id', id)
        .single();

      if (tenderError) throw tenderError;

      // Use the same RPC function as the Stock Acquisition Form
      const { data: acquisitionItems, error: acquisitionError } = await supabase
        .rpc('get_acquisition_items_with_visits_fixed', { p_tender_id: id });

      if (acquisitionError) throw acquisitionError;

      // Fetch vendor information if vendor_id exists
      let vendorInfo = null;
      if (tenderData.vendor_id) {
        const { data: vendor, error: vendorError } = await supabase
          .from('vendors')
          .select('vendor_name')
          .eq('id', tenderData.vendor_id)
          .single();
        
        if (!vendorError && vendor) {
          vendorInfo = vendor;
        }
      }

      // Fetch office information if office_ids exists and has values
      let officeInfo = null;
      if (tenderData.office_ids && tenderData.office_ids.length > 0) {
        const { data: offices, error: officeError } = await supabase
          .from('offices')
          .select('name')
          .in('id', tenderData.office_ids);
        
        if (!officeError && offices && offices.length > 0) {
          officeInfo = offices.map(office => office.name).join(', ');
        }
      }

      // Set the tender data with additional info
      setTender({
        ...tenderData,
        vendorInfo,
        officeInfo,
        items: acquisitionItems || []
      });

    } catch (error: any) {
      setError(error.message || 'Failed to load data');
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const colors = {
      pending: 'bg-red-100 text-red-800',
      partial: 'bg-yellow-100 text-yellow-800',
      completed: 'bg-green-100 text-green-800',
      cancelled: 'bg-gray-100 text-gray-800'
    };

    return (
      <Badge className={colors[status as keyof typeof colors] || colors.pending}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </Badge>
    );
  };

  const calculateTotalValue = () => {
    if (!tender?.items) return 0;
    return tender.items.reduce((total, item) => {
      // Calculate value based on received quantities
      const totalValue = item.visit_details.reduce((visitTotal, visit) => {
        return visitTotal + (visit.received_qty * 100); // Default price of 100
      }, 0);
      return total + totalValue;
    }, 0);
  };

  const getTotalOrderedQty = () => {
    if (!tender?.items) return 0;
    return tender.items.reduce((total, item) => total + item.total_tender_qty, 0);
  };

  const getTotalReceivedQty = () => {
    if (!tender?.items) return 0;
    return tender.items.reduce((total, item) => total + item.total_received_qty, 0);
  };

  const exportToExcel = () => {
    if (!tender?.items) return;

    const headers = [
      'Item Name',
      'Category', 
      'Subcategory',
      'Unit',
      'Ordered Qty',
      'Received Qty',
      'Pending Qty',
      'Status',
      'Visit Count'
    ];

    const rows = tender.items.map(item => [
      item.item_name,
      item.category,
      item.subcategory,
      item.unit_of_measurement,
      item.total_tender_qty,
      item.total_received_qty,
      item.total_pending_qty,
      item.overall_status,
      item.visit_details.length
    ]);

    const csvContent = [headers, ...rows]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `StockAcquisitionReport-${tender.tender_number || tender.id}.csv`;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-lg">Loading acquisition report...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-red-500">Error: {error}</div>
      </div>
    );
  }

  if (!tender) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-gray-500">No tender data found</div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate(-1)}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>
          <h1 className="text-2xl font-bold">Stock Acquisition Report</h1>
        </div>
        <Button onClick={exportToExcel} className="flex items-center gap-2">
          <Download className="h-4 w-4" />
          Export
        </Button>
      </div>

      {/* Tender Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Package className="h-5 w-5" />
            Tender Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-500">Tender Number</label>
              <div className="text-lg font-semibold">{tender.tender_number || '-'}</div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-500">Tender Title</label>
              <div className="text-lg">{tender.tender_title || '-'}</div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-500">Tender Date</label>
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-gray-400" />
                {formatDateDMY(tender.tender_date)}
              </div>
            </div>
            {tender.vendorInfo && (
              <div>
                <label className="block text-sm font-medium text-gray-500">Vendor</label>
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4 text-gray-400" />
                  {tender.vendorInfo.vendor_name}
                </div>
              </div>
            )}
            {tender.officeInfo && (
              <div>
                <label className="block text-sm font-medium text-gray-500">Office(s)</label>
                <div className="flex items-center gap-2">
                  <Building className="h-4 w-4 text-gray-400" />
                  {tender.officeInfo}
                </div>
              </div>
            )}
            {tender.description && (
              <div className="md:col-span-2 lg:col-span-3">
                <label className="block text-sm font-medium text-gray-500">Description</label>
                <div className="text-sm text-gray-700">{tender.description}</div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Summary Statistics */}
      <Card>
        <CardHeader>
          <CardTitle>Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{tender.items.length}</div>
              <div className="text-sm text-gray-500">Total Items</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">{getTotalOrderedQty()}</div>
              <div className="text-sm text-gray-500">Total Ordered</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{getTotalReceivedQty()}</div>
              <div className="text-sm text-gray-500">Total Received</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">
                {getTotalOrderedQty() - getTotalReceivedQty()}
              </div>
              <div className="text-sm text-gray-500">Total Pending</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Items Report */}
      <Card>
        <CardHeader>
          <CardTitle>Items & Receiving Status</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {tender.items.map((item) => (
              <div key={item.item_master_id} className="border rounded-lg p-4">
                {/* Item Header */}
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <div className="font-medium text-lg">{item.item_name}</div>
                    <div className="text-sm text-gray-500">
                      {item.category} • {item.subcategory} • {item.unit_of_measurement}
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="text-right">
                      <div className="text-sm font-medium">
                        {item.total_received_qty} / {item.total_tender_qty}
                      </div>
                      <div className="text-xs text-gray-500">
                        {item.total_pending_qty} pending
                      </div>
                    </div>
                    {getStatusBadge(item.overall_status)}
                  </div>
                </div>

                {/* Visit Details */}
                {item.visit_details && item.visit_details.length > 0 && (
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h4 className="font-medium text-gray-900 mb-3">Delivery Visits</h4>
                    <div className="grid gap-3">
                      {item.visit_details.map((visit) => (
                        <div key={visit.id} className="bg-white rounded border p-3">
                          <div className="grid grid-cols-1 md:grid-cols-4 gap-2 text-sm">
                            <div>
                              <span className="font-medium">Visit #{visit.visit_number}</span>
                            </div>
                            <div>
                              <span className="text-gray-500">Qty:</span> {visit.received_qty} / {visit.tender_qty}
                            </div>
                            <div>
                              <span className="text-gray-500">Date:</span> {formatDateDMY(visit.received_date)}
                            </div>
                            <div>
                              <span className="text-gray-500">By:</span> {visit.received_by || '-'}
                            </div>
                          </div>
                          {visit.delivery_notes && (
                            <div className="mt-2 text-sm text-gray-600">
                              <span className="font-medium">Notes:</span> {visit.delivery_notes}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default StockAcquisitionReport;
